#install.packages("rvest")
library(rvest)
star_page<-read_html("http://profilerehab.com/actors_twitter_accounts")
section_of_starpage<-html_node(star_page, xpath='//*[@id="entry"]')
star_text<-html_text(section_of_starpage)
install.packages("qdapRegex")
library(qdapRegex)
stuff<-ex_url(star_text)
names<-gsub("www.twitter.com/","", stuff)
#the wonderful solution of Giovanni Maggi! Great job!
test<-gsub("\\\\n","", names)
test1<-gsub("\\\\nWhere","",test)
test2<-gsub("\\\\nWhat","",test1)
test3<-gsub("\\\\nDoes","",test2)
test4<-gsub("\\\\n","",test3)
test4
test4[1]
length(test4)
out<-strsplit(test4, "\")
)
out<-strsplit(test4, "\\\\")
out
out[[1]]
out[[1]][1]
out<-strsplit(test4, "[\\\\]|[^[:print:]]",fixed=FALSE)
out
out[1]
star_page<-read_html("http://profilerehab.com/actors_twitter_accounts")
section_of_starpage<-html_node(star_page, xpath='//*[@id="entry"]')
star_text<-html_text(section_of_starpage)
stuff<-ex_url(star_text)
stuff<-ex_url(star_text)
stuff
names<-gsub("www.twitter.com/","", stuff)
"
#the wonderful solution of Giovanni Maggi! Great job!
test<-gsub("\\\\n","", names)
names<-gsub("www.twitter.com/","", stuff)
#the wonderful solution of Giovanni Maggi! Great job!
test<-gsub("\\\\n","", names)
#the wonderful solution of Giovanni Maggi! Great job!
test<-gsub("\\\\n","", names)
test1<-gsub("\\\\nWhere","",test)
test2<-gsub("\\\\nWhat","",test1)
test3<-gsub("\\\\nDoes","",test2)
test4
#the wonderful solution of Giovanni Maggi! Great job!
test<-gsub("\\\\n","", names)
test1<-gsub("\\\\nWhere","",test)
test2<-gsub("\\\\nWhat","",test1)
test3<-gsub("\\\\nDoes","",test2)
test4<-gsub("\\\\n","",test3)
test4
cat(test4)
finalnames<-cat(test4)
finalnames
finalnames<-cat(test4)
finalnames
finalnames<-cat(test4)
finalnames
cat(test4)
aaa<-cat(test4)
aaa
finalnames<-as.character(cat(test4))
finalnames
cat(test4)
class(cat(test4))
cat(test4)
test4
?cat()
finalnames<-as.vector(test4)
finalnames
library(rtweet)
app_name<-"CelebrityFollowers"
consumer_key<-"GlFSfoSE1yAYeaIegpSAIgBuJ"
consumer_secret<-"xEWD00z2CrDHeEPFTMgpdzNvt3rhFf4ttfb1XJJF87DasRTY1d"
access_token<-"964635660-CqW0mO7HsUtSVdvo2xWI4c1nuUXBXAM3UaZCuT1y"
access_token_secret<-"TsQX3KFvQLZPWavzpqOW9q0q4mWhWdLiWguTyrCujtjGa"
library(rtweet)
create_token(app=app_name, consumer_key=consumer_key, consumer_secret=consumer_secret)
test4[1]
myratelimits<-rate_limits()
myratelimits
network<-get_friends("aaronpaul_8Does")
i
hart_friends<-get_friends("KevinHart4real")
View(hart_friends)
View(hart_friends)
hart_friends$user_id
hart_friends$user_id
names_hart_friends<-lookup_users(hart_friends$user_id)
View(names_hart_friends)
names_hart_friends$screen_name
names_hart_friends$screen_name
View(hart_friends)
hart_friends$user
names_hart_friends$screen_name
hart_network<-cbind(hart_friends$user, names_hart_friends$screen_name)
View(hart_friends)
names_hart_friends$screen_name
hart_friends$user
names_hart_friends$screen_name
t
View(names_hart_friends)
View(hart_network)
our_celebs<-c("TheRock", "channingtatum", "KevinHart4real")
our_celebs
celebrity_networks<-as.data.frame(NULL)
for(i in 1:3){
print("class is great", i)
}
for(i in 1:3){
print("class is great")
print(i)
}
for(i in 1:3){
# print("class is great")
print(i)
}
i=2
# print("class is great")
our_celebs[i]
length(our_celebs)
for(i in 1:length(our_celebs)){
our_celebs[i]
}
for(i in 1:length(our_celebs)){
print(our_celebs[i])
}
print(our_celebs[1])
print(our_celebs[2])
print(our_celebs[3])
for(i in 1:length(our_celebs)){
print(our_celebs[i])
}
temp_network<-get_friends(our_celebs[i])
named_connections<-lookup_users(temp_network$user_id)
View(names_hart_friends)
View(hart_network)
our_celebs<-c("TheRock", "channingtatum", "KevinHart4real")
celebrity_networks<-as.data.frame(NULL)
for(i in 1:length(our_celebs)){
#first get the names of the people the celebrity follows
temp_network<-get_friends(our_celebs[i])
#then look up their screen names (twitter handles)
named_connections<-lookup_users(temp_network$user_id)
#next create an edge list for that person
edge_list<-cbind(temp_network$user, named_connections$screen_name)
#finally, bind all the edge lists together to create a single long edge list
#with our blank data frame above
final_edge_list<-rbind(celebrity_networks, edge_list)
#print value of i for debugging
print(i)
#pause to avoid rate limiting
Sys.sleep(3)
}
our_celebs<-c("TheRock", "channingtatum", "KevinHart4real")
celebrity_networks<-as.data.frame(NULL)
for(i in 1:length(our_celebs)){
#first get the names of the people the celebrity follows
temp_network<-get_friends(our_celebs[i])
#then look up their screen names (twitter handles)
named_connections<-lookup_users(temp_network$user_id)
#next create an edge list for that person
edge_list<-cbind(temp_network$user, named_connections$screen_name)
#finally, bind all the edge lists together to create a single long edge list
#with our blank data frame above
celebrity_networks<-rbind(celebrity_networks, edge_list)
#print value of i for debugging
print(i)
#pause to avoid rate limiting
Sys.sleep(3)
}
View(celebrity_networks)
install.packages("igraph")
library(igraph)
our_network<-graph.data.frame(celebrity_networks)
class(our_network)
plot(our_network)
library(ggraph)
#to make it prettier we use ggraph
#install.packages('ggraph')
library(ggraph)
#to make it prettier we use ggraph
install.packages('ggraph')
ggraph(our_network)
h
#to make it prettier we use ggraph
#install.packages('ggraph')
library(ggraph)
ggraph(our_network)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point()
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text()
V(our_network)$names
V(our_network)$name
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = V(our_network)$name))
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point()
out<-degree(our_network)
out
out<-as.data.frame(degree(our_network))
View(out)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = degree(V(our_network)$name))>1)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = V(our_network)$degree>1 ))
V(our_network)$degree
out$`degree(our_network)`
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = name, filter=V(our_network)$degree>1), repel = TRUE, size=2) +
)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>1),
repel = TRUE, size=2))
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>1),
repel = TRUE, size=2)
V(our_network)$degree
#now let's insert the degree variable into our network object
V(our_network)$degree<-degree(our_network)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>1),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point() +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point(size=V(our_network)$degree) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point(size=1) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point(size=.2) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link() +   # add edges to the plot
geom_node_point(size=.02) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link(size=.01) +   # add edges to the plot
geom_node_point(size=.02) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link(width=1) +   # add edges to the plot
geom_node_point(size=.02) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link(width=.5) +   # add edges to the plot
geom_node_point(size=.02) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link(width=.1) +   # add edges to the plot
geom_node_point(size=.2) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>2),
repel = TRUE, size=2)
ggraph(our_network) +
geom_edge_link(width=.1) +   # add edges to the plot
geom_node_point(size=.2) +
geom_node_text(aes(label = name,
filter=V(our_network)$degree>1),
repel = TRUE, size=2)
app_name<-"CelebrityFollowers"
consumer_key<-"GlFSfoSE1yAYeaIegpSAIgBuJ"
consumer_secret<-"xEWD00z2CrDHeEPFTMgpdzNvt3rhFf4ttfb1XJJF87DasRTY1d"
access_token<-"964635660-CqW0mO7HsUtSVdvo2xWI4c1nuUXBXAM3UaZCuT1y"
access_token_secret<-"TsQX3KFvQLZPWavzpqOW9q0q4mWhWdLiWguTyrCujtjGa"
library(rtweet)
create_token(app=app_name, consumer_key=consumer_key, consumer_secret=consumer_secret)
aqua_alta_tweets<-search_twitter("acqua alta")
library(rtweet)
aqua_alta_tweets<-search_twitter("acqua alta")
aqua_alta_tweets<-search_tweets("acqua alta")
View(aqua_alta_tweets)
View(aqua_alta_tweets)
aqua_alta_tweets$text
View(aqua_alta_tweets)
aqua_alta_tweets$text
aqua_alta_tweets<-search_tweets("acqua alta", n=1000)
#view text of tweets to find hashtags
aqua_alta_tweets$text
aqua_alta_tweets<-search_tweets("venice flood", n=1000)
#view text of tweets to find hashtags
aqua_alta_tweets$text
acqua_alta_tweets<-search_tweets("flood in venice", n=1000)
#view text of tweets to find hashtags
acqua_alta_tweets$text
hashtags<-read.csv("~/Documents/GitHub/comp_soc_undergrad/Code_from_class/hashtags.csv")
View(hashtags)
hashtags$Acqua.ALta.Hashtags
hashtags<-read.csv("~/Documents/GitHub/comp_soc_undergrad/Code_from_class/hashtags.csv",
stringsAsFactors = FALSE)
hashtags$Acqua.ALta.Hashtags
?search_tweets()
venice_flood_tweets<-search_tweets(hashtags$Acqua.ALta.Hashtags,
n=10000,
include_rts=FALSE,
type="recent")
venice_flood_tweets<-search_tweets(hashtags$Acqua.ALta.Hashtags[1],
n=10000,
include_rts=FALSE,
type="recent")
venice_flood_tweets<-search_tweets(c(hashtags$Acqua.ALta.Hashtags),
n=10000,
include_rts=FALSE,
type="recent")
our_hashtags<-as.character(hashtags$Acqua.ALta.Hashtags)
our_hashtags
venice_flood_tweets<-search_tweets(our_hashtags,
n=10000,
include_rts=FALSE,
type="recent")
our_hashtags[1:3]
venice_flood_tweets<-search_tweets(our_hashtags[1:3],
n=10000,
include_rts=FALSE,
type="recent")
venice_flood_tweets<-search_tweets(c("#venice","acquaalta"),
n=10000,
include_rts=FALSE,
type="recent")
(for 1:3){
print("yay")
}
(for i in 1:3){
print("yay")
}
(for i in 1:3){
print(i)
}
for(i in 1:3){
print(i)
}
for(i in 1:3){
print("Venice")
}
for(i in 1:3){
print("Venice", i)
}
for(i in 1:3){
print(i)
}
for(j in 1:3){
print(j)
}
acqua_alta_data<-as.data.frame(NULL)
length(our_hashtags)
our_hashtags[1]
our_hashtags[2]
our_hashtags[3]
for(i in 1:length(our_hashtags)){
#each time through the loop we search twitter for the hashtag
#we ask for 10,000 tweets that are not retweets and are recent (not popular)
venice_flood_tweets<-search_tweets(our_hashtags[i],
n=10000,
include_rts=FALSE,
type="recent")
#then we bind each dataset to the dataset before it
acqua_alta_data<-rbind(acqua_alta_data, venice_flood_tweets)
#we print the value of i to debug our code
print(i)
#we pause R each time through the loop to avoid rate limiting
Sys.sleep(3)
}
View(acqua_alta_data)
#first let's look at what languages we have
table(acqua_alta_data$lang)
english_tweets<-acqua_alta_data[acqua_alta_data$lang=="en",]
View(english_tweets)
library(syuzhet)
acqua_alta_data$text
english_tweets$text
english_tweets$sentiment<-get_sentiment(english_tweets$text)
mean(english_tweets$sentiment)
ggplot(english_tweets, aes(x=sentiment, y=retweet_count))+
geom_line()
library(ggplot2)
ggplot(english_tweets, aes(x=sentiment, y=retweet_count))+
geom_line()
ggplot(english_tweets, aes(x=sentiment, y=retweet_count))+
geom_line()+
theme_minimal()
ggplot(english_tweets, aes(x=sentiment, y=retweet_count))+
geom_point()+
theme_minimal()
ggplot(english_tweets, aes(x=sentiment, y=retweet_count))+
geom_point()+
geom_smooth()+
theme_minimal()
english_tweets$neg_tweet<-0
english_tweets$neg_tweet
hist(english_tweets$sentiment)
english_tweets$neg_tweet<-0
english_tweets$neg_tweet[english_tweets$sentiment<.1]<-1
table(english_tweets$neg_tweet)
english_tweets$neg_tweet
english_tweets$followers_count
our_model<-lm(retweet_count~
neg_tweet +
followers_count,
data=english_retweets
)
our_model<-lm(retweet_count~
neg_tweet +
followers_count,
data=english_tweets
)
summary(our_model)
english_tweets$neg_tweet<-0
english_tweets$neg_tweet[english_tweets$sentiment<-1]<-1
table(english_tweets$neg_tweet)
english_tweets$neg_tweet[english_tweets$sentiment<0]<-1
table(english_tweets$neg_tweet)
english_tweets$neg_tweet<-0
english_tweets$neg_tweet[english_tweets$sentiment<0]<-1
table(english_tweets$neg_tweet)
english_tweets$neg_tweet<-0
english_tweets$sentiment
english_tweets$sentiment<-get_sentiment(english_tweets$text)
english_tweets$neg_tweet<-0
english_tweets$neg_tweet[english_tweets$sentiment<0]<-1
table(english_tweets$neg_tweet)
english_tweets$followers_count
our_model<-lm(retweet_count~
neg_tweet +
followers_count,
data=english_tweets
)
summary(our_model)
english_tweets$neg_tweet<-0
english_tweets$neg_tweet[english_tweets$sentiment<-1]<-1
library(rtweet)
rate_limits()
my_rate_limits<-as.data.frame(rate_limits())
View(my_rate_limits)
?search_tweets()
getwd()
